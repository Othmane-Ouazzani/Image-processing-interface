# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'projetV2.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QImage, QPixmap
import cv2
from cv2 import CV_8U
import numpy as np
import matplotlib.pyplot as plt
from skimage.color import rgb2gray
import pywt
import lzma
import heapq
from collections import defaultdict
from processing import *
from skimage.segmentation import slic
from skimage.color import label2rgb

class Ui_MainWindow(object):
        def setupUi(self, MainWindow):
                MainWindow.setObjectName("MainWindow")
                MainWindow.setWindowModality(QtCore.Qt.NonModal)
                MainWindow.resize(1230, 870)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
                MainWindow.setSizePolicy(sizePolicy)
                MainWindow.setMinimumSize(QtCore.QSize(1230, 870))
                MainWindow.setMaximumSize(QtCore.QSize(1230, 870))
                MainWindow.setStyleSheet("background-color: rgb(35, 47, 52);\n"
                "font: 81 10pt \"JetBrains Mono ExtraBold\";\n"
                "color: rgb(255, 255, 255);")
                self.centralwidget = QtWidgets.QWidget(MainWindow)
                self.centralwidget.setObjectName("centralwidget")
                self.widget = QtWidgets.QWidget(self.centralwidget)
                self.widget.setGeometry(QtCore.QRect(10, 0, 331, 841))
                self.widget.setStyleSheet("")
                self.widget.setObjectName("widget")
                self.label = QtWidgets.QLabel(self.widget)
                self.label.setGeometry(QtCore.QRect(0, 40, 55, 16))
                self.label.setObjectName("label")
                self.widget1 = QtWidgets.QWidget(self.widget)
                self.widget1.setGeometry(QtCore.QRect(-10, 60, 321, 751))
                self.widget1.setObjectName("widget1")
                self.verticalLayout = QtWidgets.QVBoxLayout(self.widget1)
                self.verticalLayout.setContentsMargins(0, 0, 0, 0)
                self.verticalLayout.setObjectName("verticalLayout")
                self.saveBtn = QtWidgets.QPushButton(self.widget1)
                self.saveBtn.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.saveBtn.setIconSize(QtCore.QSize(20, 20))
                self.saveBtn.setObjectName("saveBtn")
                self.verticalLayout.addWidget(self.saveBtn)
                self.negativeBtn = QtWidgets.QPushButton(self.widget1)
                self.negativeBtn.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.negativeBtn.setObjectName("negativeBtn")
                self.verticalLayout.addWidget(self.negativeBtn)
                self.redimentionBtn = QtWidgets.QPushButton(self.widget1)
                self.redimentionBtn.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.redimentionBtn.setObjectName("redimentionBtn")
                self.verticalLayout.addWidget(self.redimentionBtn)
                self.cutBtn = QtWidgets.QPushButton(self.widget1)
                self.cutBtn.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.cutBtn.setObjectName("cutBtn")
                self.verticalLayout.addWidget(self.cutBtn)
                self.binarizeBtn = QtWidgets.QPushButton(self.widget1)
                self.binarizeBtn.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.binarizeBtn.setObjectName("binarizeBtn")
                self.verticalLayout.addWidget(self.binarizeBtn)
                self.histBtn = QtWidgets.QPushButton(self.widget1)
                self.histBtn.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.histBtn.setObjectName("histBtn")
                self.verticalLayout.addWidget(self.histBtn)
                self.egaliserBtn = QtWidgets.QPushButton(self.widget1)
                self.egaliserBtn.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.egaliserBtn.setObjectName("egaliserBtn")
                self.verticalLayout.addWidget(self.egaliserBtn)
                self.etirerBtn = QtWidgets.QPushButton(self.widget1)
                self.etirerBtn.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.etirerBtn.setObjectName("etirerBtn")
                self.verticalLayout.addWidget(self.etirerBtn)
                self.filterBtn = QtWidgets.QPushButton(self.widget1)
                self.filterBtn.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.filterBtn.setObjectName("filterBtn")
                self.verticalLayout.addWidget(self.filterBtn)
                self.contoursBtn = QtWidgets.QPushButton(self.widget1)
                self.contoursBtn.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.contoursBtn.setObjectName("contoursBtn")
                self.verticalLayout.addWidget(self.contoursBtn)
                self.morphMathBtn = QtWidgets.QPushButton(self.widget1)
                self.morphMathBtn.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.morphMathBtn.setObjectName("morphMathBtn")
                self.verticalLayout.addWidget(self.morphMathBtn)
                self.segmenterBtn = QtWidgets.QPushButton(self.widget1)
                self.segmenterBtn.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.segmenterBtn.setObjectName("segmenterBtn")
                self.verticalLayout.addWidget(self.segmenterBtn)
                self.pointInteretBtn = QtWidgets.QPushButton(self.widget1)
                self.pointInteretBtn.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.pointInteretBtn.setObjectName("pointInteretBtn")
                self.verticalLayout.addWidget(self.pointInteretBtn)
                self.compresserBtn = QtWidgets.QPushButton(self.widget1)
                self.compresserBtn.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.compresserBtn.setObjectName("compresserBtn")
                self.verticalLayout.addWidget(self.compresserBtn)
                self.widget_2 = QtWidgets.QWidget(self.centralwidget)
                self.widget_2.setGeometry(QtCore.QRect(350, 0, 871, 561))
                self.widget_2.setObjectName("widget_2")
                self.imageLabel = QtWidgets.QLabel(self.widget_2)
                self.imageLabel.setGeometry(QtCore.QRect(170, 70, 501, 441))
                self.imageLabel.setText("")
                # self.imageLabel.setPixmap(QtGui.QPixmap("images/myPic.jpg"))
                self.imageLabel.setStyleSheet("background-color: rgb(255,255,255)")
                self.imageLabel.setScaledContents(True)
                self.imageLabel.setWordWrap(False)
                self.imageLabel.setObjectName("image")
                self.label_2 = QtWidgets.QLabel(self.widget_2)
                self.label_2.setGeometry(QtCore.QRect(270, 20, 151, 21))
                self.label_2.setObjectName("label_2")
                self.rotateRight = QtWidgets.QPushButton(self.widget_2)
                self.rotateRight.setGeometry(QtCore.QRect(690, 260, 51, 41))
                self.rotateRight.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.rotateRight.setText("")
                icon = QtGui.QIcon()
                icon.addPixmap(QtGui.QPixmap("icons/rotate_right.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                self.rotateRight.setIcon(icon)
                self.rotateRight.setIconSize(QtCore.QSize(32, 32))
                self.rotateRight.setObjectName("rotateRight")
                self.rotateLeft = QtWidgets.QPushButton(self.widget_2)
                self.rotateLeft.setGeometry(QtCore.QRect(100, 260, 51, 41))
                self.rotateLeft.setStyleSheet("border-color:rgb(255,255,255);\n"
                "background-color: rgb(255, 255, 255);\n"
                "border-bottom-color:rgb(0,0,0);")
                self.rotateLeft.setText("")
                icon1 = QtGui.QIcon()
                icon1.addPixmap(QtGui.QPixmap("icons/rotate_left.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                self.rotateLeft.setIcon(icon1)
                self.rotateLeft.setIconSize(QtCore.QSize(32, 32))
                self.rotateLeft.setObjectName("rotateLeft")
                self.returnToOld = QtWidgets.QPushButton(self.widget_2)
                self.returnToOld.setGeometry(QtCore.QRect(420, 520, 41, 41))
                self.returnToOld.setObjectName("returnToOld")
                self.resetAll = QtWidgets.QPushButton(self.widget_2)
                self.resetAll.setGeometry(QtCore.QRect(750, 10, 121, 41))
                self.resetAll.setObjectName("resetAll")
                self.widget_3 = QtWidgets.QWidget(self.centralwidget)
                self.widget_3.setGeometry(QtCore.QRect(350, 560, 861, 261))
                self.widget_3.setStyleSheet("")
                self.widget_3.setObjectName("widget_3")
                self.stackedWidget = QtWidgets.QStackedWidget(self.widget_3)
                self.stackedWidget.setGeometry(QtCore.QRect(30, 20, 831, 261))
                self.stackedWidget.setStyleSheet("QStackedWidget{\n"
                "    border-color:white;\n"
                "}")
                self.stackedWidget.setObjectName("stackedWidget")
                self.noMenu = QtWidgets.QWidget()
                self.noMenu.setObjectName("noMenu")
                self.stackedWidget.addWidget(self.noMenu)
                self.redimentionPage = QtWidgets.QWidget()
                self.redimentionPage.setObjectName("redimentionPage")
                self.label_3 = QtWidgets.QLabel(self.redimentionPage)
                self.label_3.setGeometry(QtCore.QRect(250, 40, 71, 31))
                self.label_3.setObjectName("label_3")
                self.redApp = QtWidgets.QPushButton(self.redimentionPage)
                self.redApp.setGeometry(QtCore.QRect(540, 110, 111, 41))
                self.redApp.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.redApp.setObjectName("redApp")
                self.label_6 = QtWidgets.QLabel(self.redimentionPage)
                self.label_6.setGeometry(QtCore.QRect(250, 140, 111, 31))
                self.label_6.setObjectName("label_6")
                self.redPourcent = QtWidgets.QLineEdit(self.redimentionPage)
                self.redPourcent.setGeometry(QtCore.QRect(380, 140, 66, 31))
                self.redPourcent.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "color: rgb(0, 0, 0);")
                self.redPourcent.setObjectName("redPourcent")
                self.label_7 = QtWidgets.QLabel(self.redimentionPage)
                self.label_7.setGeometry(QtCore.QRect(0, 0, 151, 21))
                self.label_7.setObjectName("label_7")
                self.splitter = QtWidgets.QSplitter(self.redimentionPage)
                self.splitter.setGeometry(QtCore.QRect(250, 90, 81, 28))
                self.splitter.setOrientation(QtCore.Qt.Horizontal)
                self.splitter.setObjectName("splitter")
                self.label_4 = QtWidgets.QLabel(self.splitter)
                self.label_4.setObjectName("label_4")
                self.redX = QtWidgets.QLineEdit(self.splitter)
                self.redX.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "color: rgb(0, 0, 0);")
                self.redX.setObjectName("redX")
                self.splitter_2 = QtWidgets.QSplitter(self.redimentionPage)
                self.splitter_2.setGeometry(QtCore.QRect(380, 90, 81, 28))
                self.splitter_2.setOrientation(QtCore.Qt.Horizontal)
                self.splitter_2.setObjectName("splitter_2")
                self.label_5 = QtWidgets.QLabel(self.splitter_2)
                self.label_5.setObjectName("label_5")
                self.label_26 = QtWidgets.QLabel(self.redimentionPage)
                self.label_26.setGeometry(QtCore.QRect(446, 140, 21, 31))
                self.label_26.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "color: rgb(0, 0, 0);\n"
                "padding:1px;")
                self.label_26.setObjectName("label_26")
                self.redY = QtWidgets.QLineEdit(self.splitter_2)
                self.redY.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "color: rgb(0, 0, 0);")
                self.redY.setObjectName("redY")
                self.stackedWidget.addWidget(self.redimentionPage)
                self.binarisePage = QtWidgets.QWidget()
                self.binarisePage.setObjectName("binarisePage")
                self.label_16 = QtWidgets.QLabel(self.binarisePage)
                self.label_16.setGeometry(QtCore.QRect(0, 0, 91, 21))
                self.label_16.setObjectName("label_16")
                self.label_24 = QtWidgets.QLabel(self.binarisePage)
                self.label_24.setGeometry(QtCore.QRect(70, 60, 171, 21))
                self.label_24.setObjectName("label_24")
                self.label_25 = QtWidgets.QLabel(self.binarisePage)
                self.label_25.setGeometry(QtCore.QRect(70, 140, 51, 21))
                self.label_25.setObjectName("label_25")
                self.otsu = QtWidgets.QPushButton(self.binarisePage)
                self.otsu.setGeometry(QtCore.QRect(220, 130, 121, 41))
                self.otsu.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.otsu.setObjectName("otsu")
                self.seuil = QtWidgets.QLineEdit(self.binarisePage)
                self.seuil.setGeometry(QtCore.QRect(280, 60, 101, 28))
                self.seuil.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "color: rgb(0, 0, 0);")
                self.seuil.setObjectName("seuil")
                self.appSeuil = QtWidgets.QPushButton(self.binarisePage)
                self.appSeuil.setGeometry(QtCore.QRect(430, 50, 121, 41))
                self.appSeuil.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.appSeuil.setObjectName("appSeuil")
                self.stackedWidget.addWidget(self.binarisePage)
                self.filtrePage = QtWidgets.QWidget()
                self.filtrePage.setObjectName("filtrePage")
                self.label_8 = QtWidgets.QLabel(self.filtrePage)
                self.label_8.setGeometry(QtCore.QRect(0, 0, 71, 21))
                self.label_8.setObjectName("label_8")
                self.label_9 = QtWidgets.QLabel(self.filtrePage)
                self.label_9.setGeometry(QtCore.QRect(170, 30, 71, 21))
                self.label_9.setObjectName("label_9")
                self.label_10 = QtWidgets.QLabel(self.filtrePage)
                self.label_10.setGeometry(QtCore.QRect(170, 100, 71, 21))
                self.label_10.setObjectName("label_10")
                self.label_11 = QtWidgets.QLabel(self.filtrePage)
                self.label_11.setGeometry(QtCore.QRect(170, 160, 71, 21))
                self.label_11.setObjectName("label_11")
                self.ecartType = QtWidgets.QLineEdit(self.filtrePage)
                self.ecartType.setGeometry(QtCore.QRect(410, 50, 111, 28))
                self.ecartType.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "color: rgb(0, 0, 0);")
                self.ecartType.setObjectName("ecartType")
                self.label_12 = QtWidgets.QLabel(self.filtrePage)
                self.label_12.setGeometry(QtCore.QRect(250, 60, 100, 22))
                self.label_12.setObjectName("label_12")
                self.tailleMoy = QtWidgets.QLineEdit(self.filtrePage)
                self.tailleMoy.setGeometry(QtCore.QRect(415, 120, 106, 28))
                self.tailleMoy.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "color: rgb(0, 0, 0);")
                self.tailleMoy.setText("")
                self.tailleMoy.setObjectName("tailleMoy")
                self.label_13 = QtWidgets.QLabel(self.filtrePage)
                self.label_13.setGeometry(QtCore.QRect(250, 120, 160, 22))
                self.label_13.setObjectName("label_13")
                self.label_14 = QtWidgets.QLabel(self.filtrePage)
                self.label_14.setGeometry(QtCore.QRect(250, 190, 160, 28))
                self.label_14.setObjectName("label_14")
                self.tailleMediane = QtWidgets.QLineEdit(self.filtrePage)
                self.tailleMediane.setGeometry(QtCore.QRect(415, 190, 106, 28))
                self.tailleMediane.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "color: rgb(0, 0, 0);")
                self.tailleMediane.setText("")
                self.tailleMediane.setObjectName("tailleMediane")
                self.segmenterBtn_4 = QtWidgets.QPushButton(self.filtrePage)
                self.segmenterBtn_4.setGeometry(QtCore.QRect(540, 50, 31, 31))
                self.segmenterBtn_4.setStyleSheet("")
                self.segmenterBtn_4.setText("")
                icon2 = QtGui.QIcon()
                icon2.addPixmap(QtGui.QPixmap("icons/done.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
                self.segmenterBtn_4.setIcon(icon2)
                self.segmenterBtn_4.setIconSize(QtCore.QSize(28, 28))
                self.segmenterBtn_4.setObjectName("segmenterBtn_4")
                self.segmenterBtn_5 = QtWidgets.QPushButton(self.filtrePage)
                self.segmenterBtn_5.setGeometry(QtCore.QRect(540, 120, 31, 31))
                self.segmenterBtn_5.setStyleSheet("")
                self.segmenterBtn_5.setText("")
                self.segmenterBtn_5.setIcon(icon2)
                self.segmenterBtn_5.setIconSize(QtCore.QSize(28, 28))
                self.segmenterBtn_5.setObjectName("segmenterBtn_5")
                self.segmenterBtn_6 = QtWidgets.QPushButton(self.filtrePage)
                self.segmenterBtn_6.setGeometry(QtCore.QRect(540, 190, 31, 31))
                self.segmenterBtn_6.setStyleSheet("")
                self.segmenterBtn_6.setText("")
                self.segmenterBtn_6.setIcon(icon2)
                self.segmenterBtn_6.setIconSize(QtCore.QSize(28, 28))
                self.segmenterBtn_6.setObjectName("segmenterBtn_6")
                self.stackedWidget.addWidget(self.filtrePage)
                self.contoursPage = QtWidgets.QWidget()
                self.contoursPage.setObjectName("contoursPage")
                self.label_15 = QtWidgets.QLabel(self.contoursPage)
                self.label_15.setGeometry(QtCore.QRect(0, 0, 241, 21))
                self.label_15.setObjectName("label_15")
                self.gradient = QtWidgets.QPushButton(self.contoursPage)       
                self.gradient.setGeometry(QtCore.QRect(590, 70, 121, 41))
                self.gradient.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.gradient.setObjectName("gradient")
                self.sobel = QtWidgets.QPushButton(self.contoursPage)
                self.sobel.setGeometry(QtCore.QRect(440, 70, 121, 41))
                self.sobel.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.sobel.setObjectName("sobel")
                self.robert = QtWidgets.QPushButton(self.contoursPage)
                self.robert.setGeometry(QtCore.QRect(290, 160, 121, 41))
                self.robert.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.robert.setObjectName("robert")
                self.laplacien = QtWidgets.QPushButton(self.contoursPage)
                self.laplacien.setGeometry(QtCore.QRect(460, 160, 121, 41))
                self.laplacien.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.laplacien.setObjectName("laplacien")
                self.contourKernel = QtWidgets.QLineEdit(self.contoursPage)
                self.contourKernel.setGeometry(QtCore.QRect(270, 80, 111, 28))
                self.contourKernel.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "color: rgb(0, 0, 0);")
                self.contourKernel.setObjectName("contourKernel")
                self.label_17 = QtWidgets.QLabel(self.contoursPage)
                self.label_17.setGeometry(QtCore.QRect(110, 80, 131, 21))
                self.label_17.setObjectName("label_17")
                self.seuilGradient = QtWidgets.QLineEdit(self.contoursPage)
                self.seuilGradient.setGeometry(QtCore.QRect(730, 80, 111, 28))
                self.seuilGradient.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "color: rgb(0, 0, 0);")
                self.seuilGradient.setObjectName("seuilGradient")
                self.seuilRobert_1 = QtWidgets.QLineEdit(self.contoursPage)
                self.seuilRobert_1.setGeometry(QtCore.QRect(130, 140, 111, 28))
                self.seuilRobert_1.setStyleSheet("background-color: rgb(255, 255, 255);\n"
        "color: rgb(0, 0, 0);")
                self.seuilRobert_1.setObjectName("seuilRobert_1")
                self.seuilRobert_2 = QtWidgets.QLineEdit(self.contoursPage)
                self.seuilRobert_2.setGeometry(QtCore.QRect(130, 190, 111, 28))
                self.seuilRobert_2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
        "color: rgb(0, 0, 0);")
                self.seuilRobert_2.setObjectName("seuilRobert_2")
                self.stackedWidget.addWidget(self.contoursPage)
                self.morphPage = QtWidgets.QWidget()
                self.morphPage.setObjectName("morphPage")
                self.label_18 = QtWidgets.QLabel(self.morphPage)
                self.label_18.setGeometry(QtCore.QRect(0, 0, 241, 21))
                self.label_18.setObjectName("label_18")
                self.splitter_3 = QtWidgets.QSplitter(self.morphPage)
                self.splitter_3.setGeometry(QtCore.QRect(40, 140, 761, 44))
                self.splitter_3.setOrientation(QtCore.Qt.Horizontal)
                self.splitter_3.setObjectName("splitter_3")
                self.delatation = QtWidgets.QPushButton(self.splitter_3)
                self.delatation.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.delatation.setObjectName("delatation")
                self.ouverture = QtWidgets.QPushButton(self.splitter_3)
                self.ouverture.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.ouverture.setObjectName("ouverture")
                self.filtreMorph = QtWidgets.QPushButton(self.splitter_3)
                self.filtreMorph.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.filtreMorph.setObjectName("filtreMorph")
                self.erosion = QtWidgets.QPushButton(self.splitter_3)
                self.erosion.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.erosion.setObjectName("erosion")
                self.fermeture = QtWidgets.QPushButton(self.splitter_3)
                self.fermeture.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.fermeture.setObjectName("fermeture")
                self.splitter_4 = QtWidgets.QSplitter(self.morphPage)
                self.splitter_4.setGeometry(QtCore.QRect(90, 60, 651, 28))
                self.splitter_4.setOrientation(QtCore.Qt.Horizontal)
                self.splitter_4.setObjectName("splitter_4")
                self.label_19 = QtWidgets.QLabel(self.splitter_4)
                self.label_19.setObjectName("label_19")
                self.elemStructMorph = QtWidgets.QComboBox(self.splitter_4)
                self.elemStructMorph.setStyleSheet("QComboBox\n"
                "{\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 1px 0px 1px 3px; /*This makes text colour work*/\n"
                "}")
                self.elemStructMorph.setObjectName("elemStructMorph")
                self.elemStructMorph.addItem("")
                self.elemStructMorph.addItem("")
                self.elemStructMorph.addItem("")
                self.elemStructMorph.addItem("")
                self.label_20 = QtWidgets.QLabel(self.splitter_4)
                self.label_20.setObjectName("label_20")
                self.morphKernelTaill = QtWidgets.QLineEdit(self.splitter_4)
                self.morphKernelTaill.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "color: rgb(0, 0, 0);")
                self.morphKernelTaill.setObjectName("morphKernelTaill")
                self.morphKernelTaill.setPlaceholderText('Exemple: 3x3')
                self.stackedWidget.addWidget(self.morphPage)
                self.segmentPage = QtWidgets.QWidget()
                self.segmentPage.setObjectName("segmentPage")
                self.croissance = QtWidgets.QPushButton(self.segmentPage)
                self.croissance.setGeometry(QtCore.QRect(110, 50, 231, 44))
                self.croissance.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.croissance.setObjectName("croissance")
                self.kmeans = QtWidgets.QPushButton(self.segmentPage)
                self.kmeans.setGeometry(QtCore.QRect(460, 140, 221, 44))
                self.kmeans.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.kmeans.setObjectName("kmeans")
                self.partition = QtWidgets.QPushButton(self.segmentPage)
                self.partition.setGeometry(QtCore.QRect(460, 50, 221, 44))
                self.partition.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.partition.setObjectName("partition")
                self.label_21 = QtWidgets.QLabel(self.segmentPage)
                self.label_21.setGeometry(QtCore.QRect(0, 0, 101, 21))
                self.label_21.setObjectName("label_21")
                self.label_22 = QtWidgets.QLabel(self.segmentPage)
                self.label_22.setGeometry(QtCore.QRect(120, 150, 171, 21))
                self.label_22.setObjectName("label_22")
                self.nbClasses = QtWidgets.QLineEdit(self.segmentPage)
                self.nbClasses.setGeometry(QtCore.QRect(320, 150, 111, 28))
                self.nbClasses.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                "color: rgb(0, 0, 0);")
                self.nbClasses.setObjectName("nbClasses")
                self.seedInput = QtWidgets.QLineEdit(self.segmentPage)
                self.seedInput.setGeometry(QtCore.QRect(10, 60, 81, 28))
                self.seedInput.setStyleSheet("background-color: rgb(255, 255, 255);\n"
        "color: rgb(0, 0, 0);")
                self.seedInput.setObjectName("seedInput")
                self.stackedWidget.addWidget(self.segmentPage)
                self.compresserPage = QtWidgets.QWidget()
                self.compresserPage.setObjectName("compresserPage")
                self.huffman = QtWidgets.QPushButton(self.compresserPage)
                self.huffman.setGeometry(QtCore.QRect(90, 60, 161, 44))
                self.huffman.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.huffman.setObjectName("huffman")
                self.lzw = QtWidgets.QPushButton(self.compresserPage)
                self.lzw.setGeometry(QtCore.QRect(340, 60, 161, 44))
                self.lzw.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.lzw.setObjectName("lzw")
                self.ondelette = QtWidgets.QPushButton(self.compresserPage)
                self.ondelette.setGeometry(QtCore.QRect(590, 60, 161, 44))
                self.ondelette.setStyleSheet("QPushButton\n"
                "{\n"
                "    text-align:left;\n"
                "    color:white;\n"
                "    border-color:rgb(35, 47, 52);\n"
                "    border-bottom-color: rgba(255,255,255,200);\n"
                "    border-width: 1px;\n"
                "    border-style: solid;\n"
                "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
                "}\n"
                "QPushButton:hover{\n"
                "    color: rgb(249, 170, 51);\n"
                "    background-color: rgb(50, 60, 70);\n"
                "}")
                self.ondelette.setObjectName("ondelette")
                self.label_23 = QtWidgets.QLabel(self.compresserPage)
                self.label_23.setGeometry(QtCore.QRect(0, 0, 101, 21))
                self.label_23.setObjectName("label_23")
                self.stackedWidget.addWidget(self.compresserPage)
                self.ptsInteretPage = QtWidgets.QWidget()
                self.ptsInteretPage.setObjectName("ptsInteretPage")
                self.harrisButton = QtWidgets.QRadioButton(self.ptsInteretPage)
                self.harrisButton.setGeometry(QtCore.QRect(250, 60, 82, 17))
                self.harrisButton.setObjectName("harrisButton")
                self.houghButton = QtWidgets.QRadioButton(self.ptsInteretPage)
                self.houghButton.setGeometry(QtCore.QRect(500, 60, 82, 17))
                self.houghButton.setObjectName("houghButton")
                self.pointInteretApp = QtWidgets.QPushButton(self.ptsInteretPage)
                self.pointInteretApp.setGeometry(QtCore.QRect(260, 130, 319, 38))
                self.pointInteretApp.setStyleSheet("QPushButton\n"
        "{\n"
        "    text-align:left;\n"
        "    color:white;\n"
        "    border-color:rgb(35, 47, 52);\n"
        "    border-bottom-color: rgba(255,255,255,200);\n"
        "    border-width: 1px;\n"
        "    border-style: solid;\n"
        "    padding: 10px 0px 10px 14px; /*This makes text colour work*/\n"
        "}\n"
        "QPushButton:hover{\n"
        "    color: rgb(249, 170, 51);\n"
        "    background-color: rgb(50, 60, 70);\n"
        "}")
                self.pointInteretApp.setObjectName("pointInteretApp")
                self.siftButton = QtWidgets.QRadioButton(self.ptsInteretPage)
                self.siftButton.setGeometry(QtCore.QRect(380, 60, 82, 17))
                self.siftButton.setObjectName("siftButton")
                self.stackedWidget.addWidget(self.ptsInteretPage)
                MainWindow.setCentralWidget(self.centralwidget)
                self.menubar = QtWidgets.QMenuBar(MainWindow)
                self.menubar.setGeometry(QtCore.QRect(0, 0, 1230, 28))
                self.menubar.setObjectName("menubar")
                self.menuOpen = QtWidgets.QMenu(self.menubar)
                self.menuOpen.setObjectName("menuOpen")
                MainWindow.setMenuBar(self.menubar)
                self.statusbar = QtWidgets.QStatusBar(MainWindow)
                self.statusbar.setObjectName("statusbar")
                MainWindow.setStatusBar(self.statusbar)
                self.openNewImg = QtWidgets.QAction(MainWindow)
                self.openNewImg.setObjectName("openNewImg")
                self.menuOpen.addAction(self.openNewImg)
                self.menubar.addAction(self.menuOpen.menuAction())

                self.retranslateUi(MainWindow)
                self.stackedWidget.setCurrentIndex(0)
                QtCore.QMetaObject.connectSlotsByName(MainWindow)
                
                #Added code here
                self.filename = None
                self.tmp = None
                self.image = None
                self.oldImage = None
                self.firstImage = None
                self.currentAngle = 0
                

        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
                self.label.setText(_translate("MainWindow", "Menu"))
                self.saveBtn.setText(_translate("MainWindow", "Enregistrer"))
                self.negativeBtn.setText(_translate("MainWindow", "Image négative"))
                self.negativeBtn.clicked.connect(self.getNegativeImg)
                self.redimentionBtn.setText(_translate("MainWindow", "Redimentionné"))
                self.redimentionBtn.clicked.connect(self.openRedimentionPage)
                self.cutBtn.setText(_translate("MainWindow", "Couper une zone"))
                self.cutBtn.clicked.connect(self.selectRectImg)
                self.binarizeBtn.setText(_translate("MainWindow", "Binariser"))
                self.binarizeBtn.clicked.connect(self.openBinariserPage)
                self.histBtn.setText(_translate("MainWindow", "Histogramme"))
                self.histBtn.clicked.connect(self.showHistogramme)
                self.egaliserBtn.setText(_translate("MainWindow", "Egaliser"))
                self.egaliserBtn.clicked.connect(self.imgHistEqualizer)
                self.etirerBtn.setText(_translate("MainWindow", "Etirer"))
                self.etirerBtn.clicked.connect(self.stretchImgHist)
                self.filterBtn.setText(_translate("MainWindow", "Filtrer"))
                self.filterBtn.clicked.connect(self.openFiltrePage)
                self.returnToOld.setText(_translate("MainWindow", "<-"))
                self.returnToOld.clicked.connect(self.returnToOldState)
                self.resetAll.setText(_translate("MainWindow", "Restaurer"))
                self.resetAll.clicked.connect(self.resetImage)
                self.contoursBtn.setText(_translate("MainWindow", "Extraire les contours"))
                self.contoursBtn.clicked.connect(self.openContoursPage)
                self.morphMathBtn.setText(_translate("MainWindow", "Morphologie Mathématique"))
                self.morphMathBtn.clicked.connect(self.openMorphMathPage)
                self.segmenterBtn.setText(_translate("MainWindow", "Segmenter"))
                self.segmenterBtn.clicked.connect(self.openSegmenterPage)
                self.pointInteretBtn.setText(_translate("MainWindow", "Detecter les point d\'interet"))
                self.pointInteretBtn.clicked.connect(self.openPtnInteretPage)
                self.compresserBtn.setText(_translate("MainWindow", "Compresser"))
                self.compresserBtn.clicked.connect(self.openCompresserPage)
                self.label_3.setText(_translate("MainWindow", "Taille"))
                self.redApp.setText(_translate("MainWindow", "Appliquer"))
                self.redApp.clicked.connect(self.redimentionner)
                self.label_6.setText(_translate("MainWindow", "Pourcentage"))
                self.label_7.setText(_translate("MainWindow", "Redimentionner"))
                self.label_4.setText(_translate("MainWindow", "X"))
                self.label_5.setText(_translate("MainWindow", "Y"))
                self.label_16.setText(_translate("MainWindow", "Binariser"))
                self.label_24.setText(_translate("MainWindow", "Seuillage manuel"))
                self.label_25.setText(_translate("MainWindow", "Otsu"))
                self.label_26.setText(_translate("MainWindow", "%"))
                self.otsu.setText(_translate("MainWindow", "Otsu"))
                self.otsu.clicked.connect(self.binarizeOtsu)
                self.appSeuil.setText(_translate("MainWindow", "Appliquer"))
                self.appSeuil.clicked.connect(self.binarizeImg)
                self.label_8.setText(_translate("MainWindow", "Filtre"))
                self.label_9.setText(_translate("MainWindow", "Gaussien"))
                self.label_10.setText(_translate("MainWindow", "Moyenneur"))
                self.label_11.setText(_translate("MainWindow", "Mediane"))
                self.label_12.setText(_translate("MainWindow", "Ecart-type"))
                self.label_13.setText(_translate("MainWindow", "Taille de filtre"))
                self.label_14.setText(_translate("MainWindow", "Taille de filtre"))
                self.label_15.setText(_translate("MainWindow", "Extraction des contours"))
                self.gradient.setText(_translate("MainWindow", "Gradient"))
                self.gradient.clicked.connect(self.gradientImage)
                self.sobel.setText(_translate("MainWindow", "Sobel"))
                self.sobel.clicked.connect(self.sobelImg)
                self.robert.setText(_translate("MainWindow", "Robert"))
                self.robert.clicked.connect(self.robertImage)
                self.laplacien.setText(_translate("MainWindow", "Laplacien"))
                self.laplacien.clicked.connect(self.laplacienImg)
                self.label_17.setText(_translate("MainWindow", "Taille Kernel"))
                self.seuilGradient.setPlaceholderText(_translate("MainWindow", "Seuil Gradient"))
                self.seuilRobert_1.setPlaceholderText(_translate("MainWindow", "Seuil Robert 1"))
                self.seuilRobert_2.setPlaceholderText(_translate("MainWindow", "Seuil Robert 2"))
                self.label_18.setText(_translate("MainWindow", "Morphologie Mathématique"))
                self.delatation.setText(_translate("MainWindow", "Delatation"))
                self.delatation.clicked.connect(self.delateImg)
                self.ouverture.setText(_translate("MainWindow", "Ouverture"))
                self.ouverture.clicked.connect(self.ouvertureImg)
                self.filtreMorph.setText(_translate("MainWindow", "Filtre Morphologie"))
                self.filtreMorph.clicked.connect(self.filtreMorphologieImg)
                self.erosion.setText(_translate("MainWindow", "Erosion"))
                self.erosion.clicked.connect(self.erodeImg)
                self.fermeture.setText(_translate("MainWindow", "Fermeture"))
                self.fermeture.clicked.connect(self.fermetureImg)
                self.label_19.setText(_translate("MainWindow", "Element Structurant"))
                self.elemStructMorph.setItemText(0, _translate("MainWindow", "Choisir..."))
                self.elemStructMorph.setItemText(1, _translate("MainWindow", "Cross"))
                self.elemStructMorph.setItemText(2, _translate("MainWindow", "Elipse"))
                self.elemStructMorph.setItemText(3, _translate("MainWindow", "Rectangle"))
                self.label_20.setText(_translate("MainWindow", "Taille"))
                self.croissance.setText(_translate("MainWindow", "Croissance de région"))
                self.croissance.clicked.connect(self.region_growing)
                self.kmeans.setText(_translate("MainWindow", "Méthode K-means"))
                self.kmeans.clicked.connect(self.kmeans_region)
                self.partition.setText(_translate("MainWindow", "Partition de région"))
                self.partition.clicked.connect(self.partition_image)
                self.label_21.setText(_translate("MainWindow", "Segmenter"))
                self.label_22.setText(_translate("MainWindow", "Nombre de classes"))
                self.seedInput.setPlaceholderText(_translate("MainWindow", "    seed (x,y)"))
                self.huffman.setText(_translate("MainWindow", "Huffman"))
                self.huffman.clicked.connect(self.HuffmanImg)
                self.lzw.setText(_translate("MainWindow", "LZW"))
                self.lzw.clicked.connect(self.LZWImg)
                self.ondelette.setText(_translate("MainWindow", "Ondelette"))
                self.ondelette.clicked.connect(self.onDeletteImg)
                self.label_23.setText(_translate("MainWindow", "Compresser"))
                self.harrisButton.setText(_translate("MainWindow", "Harris"))
                self.houghButton.setText(_translate("MainWindow", "Hough"))
                self.pointInteretApp.setText(_translate("MainWindow", "Detecter les points d\'interet"))
                self.pointInteretApp.clicked.connect(self.pointsInteretImg)
                self.menuOpen.setTitle(_translate("MainWindow", "Open"))
                self.openNewImg.setText(_translate("MainWindow", "New"))
                self.openNewImg.triggered.connect(self.loadImage)
                self.segmenterBtn_4.clicked.connect(self.gaussienFilter)
                self.segmenterBtn_5.clicked.connect(self.moyenneurFilter)
                self.segmenterBtn_6.clicked.connect(self.medianFilter)
                self.siftButton.setText(_translate("MainWindow", "Sift"))
                self.rotateLeft.clicked.connect(self.FrotateLeft)
                self.rotateRight.clicked.connect(self.FrotateRight)
                self.saveBtn.clicked.connect(self.savePhoto)
                
        def openRedimentionPage(self):
                self.stackedWidget.setCurrentIndex(1)
        def openBinariserPage(self):
                self.stackedWidget.setCurrentIndex(2)
        def openFiltrePage(self):
                self.stackedWidget.setCurrentIndex(3)
        def openContoursPage(self):
                self.stackedWidget.setCurrentIndex(4)  
        def openMorphMathPage(self):
                self.stackedWidget.setCurrentIndex(5)
        def openSegmenterPage(self):
                self.stackedWidget.setCurrentIndex(6)
        def openCompresserPage(self):
                self.stackedWidget.setCurrentIndex(7)
        def openPtnInteretPage(self):
                self.stackedWidget.setCurrentIndex(8)
                
        def loadImage(self):
                try:
                        self.filename = QFileDialog.getOpenFileName(filter="Image (*.*)")[0]
                        self.image = cv2.imread(self.filename)
                        # self.image = cv2.resize(self.image, [501, 441])
                        self.firstImage = self.image.copy()
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)

        def setPhoto(self,image):
                self.tmp = image
                # image = cv2.resize(image, [501, 441])
                frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                image = QImage(frame, frame.shape[1],frame.shape[0],frame.strides[0],QImage.Format_RGB888)
                try:
                        self.imageLabel.setPixmap(QtGui.QPixmap.fromImage(image))
                except Exception as e:
                        print(e)
            
        def savePhoto(self):
                filename = QFileDialog.getSaveFileName(filter="JPG(*.jpg);;PNG(*.png);;TIFF(*.tiff);;BMP(*.bmp)")[0]
                cv2.imwrite(filename,self.tmp)
                print('Image saved as ', filename)
      
        def selectRectImg(self):
                try:
                        showCrosshair = False
                        fromCenter = False
                        r = cv2.selectROI("Image", self.image, fromCenter, showCrosshair)
                        cv2.waitKey(0)
                        cv2.destroyAllWindows()
                        imgCrop = self.image[int(r[1]):int(r[1]+r[3]), int(r[0]):int(r[0]+r[2])]
                        self.oldImage = self.image.copy()
                        self.image = imgCrop
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)
                
        def getNegativeImg(self):
                try:
                        colored_negative = abs(255-self.image)
                        self.oldImage = self.image.copy()
                        self.image = colored_negative
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)
                # return colored_negative
        
        def FrotateLeft(self):
                try:
                        self.currentAngle += 90
                        rotatedImage = cv2.rotate(self.image, cv2.ROTATE_90_COUNTERCLOCKWISE)
                        if self.currentAngle == 180 or self.currentAngle == -180:
                                self.currentAngle = 0
                        self.oldImage = self.image.copy()
                        self.image = rotatedImage
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)
        
        def FrotateRight(self):
                try:
                        self.currentAngle -= 90
                        rotatedImage = cv2.rotate(self.image, cv2.ROTATE_90_CLOCKWISE)
                        if self.currentAngle == 180 or self.currentAngle == -180:
                                self.currentAngle = 0
                        self.oldImage = self.image.copy()
                        self.image = rotatedImage
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)
        
        def redimentionner(self):
                x = self.redX.text()
                y = self.redY.text()
                pourcentage = self.redPourcent.text()
                print(x, y, "    ", pourcentage)
                if x != "" and y != "":
                        self.redimentionImgXY()
                if pourcentage != "":
                        self.redimentionImgPourcent()
        
        def redimentionImgXY(self):
                try:
                        imageResized = None
                        x = self.redX.text()
                        y = x = self.redY.text()
                        if x == "":
                                x = self.image.shape[0]
                        if y == "":
                                y = self.image.shape[1]
                        imageResized = cv2.resize(self.image, [int(x), int(y)])
                        if int(x) < 501 and int(y) < 441:
                                self.imageLabel.setGeometry(QtCore.QRect(170+int((501-int(x))/2), 70+int((441-int(y))/2), int(x), int(y)))
                        if int(x) < 501 and int(y) > 441:
                                self.imageLabel.setGeometry(QtCore.QRect(170+int((501-int(x))/2), 70, int(x), 441))
                        if int(x) > 501 and int(y) < 441:
                                self.imageLabel.setGeometry(QtCore.QRect(170, 70+int((441-int(y))/2), 501, int(y)))
                        self.oldImage = self.image.copy()
                        self.image = imageResized
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)

        def redimentionImgPourcent(self):
                try:
                        pourcentage = self.redPourcent.text()
                        if pourcentage == "":
                                pourcentage = 100
                        pourcentage = int(pourcentage)/100
                        x1 = int(self.image.shape[0]*pourcentage)
                        y1 = int(self.image.shape[1]*pourcentage)
                        imageResized = cv2.resize(self.image, [x1, y1])
                        if int(x1) < 501 and int(y1) < 441:
                                self.imageLabel.setGeometry(QtCore.QRect(170+int((501-int(x1))/2), 70+int((441-int(y1))/2), int(x1), int(y1)))
                        if int(x1) < 501 and int(y1) > 441:
                                self.imageLabel.setGeometry(QtCore.QRect(170+int((501-int(x1))/2), 70, int(x1), 441))
                        if int(x1) > 501 and int(y1) < 441:
                                self.imageLabel.setGeometry(QtCore.QRect(170, 70+int((441-int(y1))/2), 501, int(y1)))
                        self.oldImage = self.image.copy()
                        self.image = imageResized
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)

        def imgHistEqualizer(self):
                try:
                        imgEqualized = None
                        try:
                                dim = self.image.shape[2]
                        except Exception as e:
                                dim = 1
                        if dim == 1:
                                imgEqualized = equalization(self.image)
                        elif dim == 3:
                                imgEqualized = self.image.copy()
                                imgEqualized[:,:,0] = equalization(imgEqualized[:,:,0])
                                imgEqualized[:,:,1] = equalization(imgEqualized[:,:,1])
                                imgEqualized[:,:,2] = equalization(imgEqualized[:,:,2])
                        
                        self.oldImage = self.image.copy()
                        self.image = imgEqualized
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)

        def stretchImgHist(self):
                try:
                        imgStretched = None
                        try:
                                dim = self.image.shape[2]
                        except Exception as e:
                                dim = 1
                        if dim == 1:
                                min_intensity = np.min(self.image)
                                max_intensity = np.max(self.image)
                                imgStretched = (self.image - min_intensity) * (255.0 / (max_intensity - min_intensity))
                        elif dim == 3:
                                b, g, r = cv2.split(self.image)
                                min_intensity_b = np.min(b)
                                max_intensity_b = np.max(b)
                                stretched_b = (b - min_intensity_b) * (255.0 / (max_intensity_b - min_intensity_b))
                                min_intensity_g = np.min(g)
                                max_intensity_g = np.max(g)
                                stretched_g = (g - min_intensity_g) * (255.0 / (max_intensity_g - min_intensity_g))
                                min_intensity_r = np.min(r)
                                max_intensity_r = np.max(r)
                                stretched_r = (r - min_intensity_r) * (255.0 / (max_intensity_r - min_intensity_r))
                                imgStretched = cv2.merge((stretched_b, stretched_g, stretched_r))
                        self.oldImage = self.image.copy()
                        self.image = cv2.convertScaleAbs(imgStretched)
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)


        def showHistogramme(self):
                try:
                        try:
                                dim = self.image.shape[2]
                        except Exception as e:
                                dim = 1
                        if dim == 1:
                                hist = getHistogram(self.image)
                                plt.plot(hist, color='black')
                        elif dim == 3:   
                                b, g, r = cv2.split(self.image)
                                hist_b = getHistogram(b)
                                hist_g = getHistogram(g)
                                hist_r = getHistogram(r)
                                plt.plot(hist_b, color='b')
                                plt.plot(hist_g, color='g')
                                plt.plot(hist_r, color='r')
                        plt.title('Histogramme de l\'image couleur')
                        plt.xlabel('Niveaux de couleur')
                        plt.ylabel('Nombre de pixels')
                        plt.show()
                except Exception as e:
                        print(e)
                        
        def binarizeImg(self):
                try:
                        imageGray = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
                        threshold = self.seuil.text()
                        imgThresh = binarizeThreshold(imageGray, int(threshold))
                        self.oldImage = self.image.copy()
                        self.image = imgThresh
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)
        
        def binarizeOtsu(self):
                try:
                        imageGray = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
                        imgThresh = binarizeOtsu(imageGray)
                        self.oldImage = self.image.copy()
                        self.image = imgThresh
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)
    
        def returnToOldState(self):
                self.image = self.oldImage
                self.imageLabel.setGeometry(QtCore.QRect(170, 70, 501, 441))
                self.setPhoto(self.image)
                
        def gaussienFilter(self):
                try:
                        sigma = self.ecartType.text()
                        if sigma == "":
                                sigma = 0
                        print(float(sigma))
                        imgFiltered = cv2.GaussianBlur(self.image, (0, 0), float(sigma))
                        self.oldImage = self.image.copy()
                        self.image = imgFiltered
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)

        def moyenneurFilter(self):
                try:
                        kernelSize = self.tailleMoy.text()
                        if kernelSize == "":
                                kernelSize = 3
                        kernel = np.ones((int(kernelSize), int(kernelSize)), np.float32) / (int(kernelSize) * int(kernelSize))
                        imgFiltered = cv2.filter2D(self.image, -1, kernel)
                        self.oldImage = self.image.copy()
                        self.image = imgFiltered
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)

        def medianFilter(self):
                try:
                        kernelSize = self.tailleMediane.text()
                        if kernelSize == "":
                                kernelSize = 3
                        imgFiltered = cv2.medianBlur(self.image, int(kernelSize))
                        self.oldImage = self.image.copy()
                        self.image = imgFiltered
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)
                        
        def resetImage(self):
                try:
                        self.image = self.firstImage
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)

        def erodeImg(self):
                try:
                        taille = self.morphKernelTaill.text()
                        h, w = taille.split("x")
                        typeElem = self.elemStructMorph.currentIndex()
                        img = self.image.copy()
                        try:
                                img = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
                                _, img = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
                        except Exception as e:
                                print("Already binarized")
                        if h == "":
                                h = 3
                        if w == "":
                                w = 3
                        if typeElem == 1:
                                kernel = cv2.getStructuringElement(cv2.MORPH_CROSS, (int(h),int(w)))
                        elif typeElem == 1:
                                kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (int(h),int(w)))
                        else:
                                kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (int(h),int(w)))
                        erodedImg = cv2.erode(img, kernel, iterations=1)
                        self.oldImage = self.image.copy()
                        self.image = erodedImg
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)

        def delateImg(self):
                try:
                        taille = self.morphKernelTaill.text()
                        h, w = taille.split("x")
                        typeElem = self.elemStructMorph.currentIndex()
                        img = self.image.copy()
                        try:
                                img = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
                                _, img = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
                        except Exception as e:
                                print("Already binarized")
                        if h == "":
                                h = 3
                        if w == "":
                                w = 3
                        if typeElem == 1:
                                kernel = cv2.getStructuringElement(cv2.MORPH_CROSS, (int(h),int(w)))
                        elif typeElem == 1:
                                kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (int(h),int(w)))
                        else:
                                kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (int(h),int(w)))
                        dilatedImg = cv2.dilate(img, kernel)
                        self.oldImage = self.image.copy()
                        self.image = dilatedImg
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)
                        
        def ouvertureImg(self):
                try:
                        taille = self.morphKernelTaill.text()
                        h, w = taille.split("x")
                        typeElem = self.elemStructMorph.currentIndex()
                        img = self.image.copy()
                        try:
                                img = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
                                _, img = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
                        except Exception as e:
                                print("Already binarized")
                        if h == "":
                                h = 3
                        if w == "":
                                w = 3
                        if typeElem == 1:
                                kernel = cv2.getStructuringElement(cv2.MORPH_CROSS, (int(h),int(w)))
                        elif typeElem == 1:
                                kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (int(h),int(w)))
                        else:
                                kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (int(h),int(w)))
                        ouvertImg = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)
                        self.oldImage = self.image.copy()
                        self.image = ouvertImg
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)
                        
        def fermetureImg(self):
                try:
                        taille = self.morphKernelTaill.text()
                        h, w = taille.split("x")
                        typeElem = self.elemStructMorph.currentIndex()
                        img = self.image.copy()
                        try:
                                img = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
                                _, img = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
                        except Exception as e:
                                print("Already binarized")
                        if h == "":
                                h = 3
                        if w == "":
                                w = 3
                        if typeElem == 1:
                                kernel = cv2.getStructuringElement(cv2.MORPH_CROSS, (int(h),int(w)))
                        elif typeElem == 1:
                                kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (int(h),int(w)))
                        else:
                                kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (int(h),int(w)))
                        closedImg = cv2.morphologyEx(img, cv2.MORPH_CLOSE, kernel)
                        self.oldImage = self.image.copy()
                        self.image = closedImg
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)

        def filtreMorphologieImg(self):
                try:
                        taille = self.morphKernelTaill.text()
                        h, w = taille.split("x")
                        typeElem = self.elemStructMorph.currentIndex()
                        img = self.image.copy()
                        try:
                                img = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
                                _, img = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
                        except Exception as e:
                                print("Already binarized")
                        if h == "":
                                h = 3
                        if w == "":
                                w = 3
                        if typeElem == 1:
                                kernel = cv2.getStructuringElement(cv2.MORPH_CROSS, (int(h),int(w)))
                        elif typeElem == 1:
                                kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (int(h),int(w)))
                        else:
                                kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (int(h),int(w)))
                        imgFiltred = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)
                        imgFiltred = cv2.morphologyEx(imgFiltred, cv2.MORPH_CLOSE, kernel)
                        self.oldImage = self.image.copy()
                        self.image = imgFiltred
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)

        

        def sobelImg(self):
                try:     
                        kernelSize=self.contourKernel.text()
                        if(kernelSize!=""):      
                                kernelSize=int(kernelSize)
                        else: kernelSize=3
                        img = self.image.copy()
                        gradient_x = cv2.Sobel(img, cv2.CV_64F, 1, 0, kernelSize)
                        gradient_y = cv2.Sobel(img, cv2.CV_64F, 0, 1, kernelSize)
                        gradient_xx = cv2.convertScaleAbs(gradient_x)
                        gradient_yy = cv2.convertScaleAbs(gradient_y)
                        gradient = cv2.addWeighted(gradient_x, 0.5, gradient_y, 0.5, 0)
                        gradient2=cv2.addWeighted(gradient_xx, 0.5, gradient_yy, 0.5, 0)
                        self.oldImage = self.image.copy()
                        self.image = gradient2
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)

        def gradientImage(self):
                try:    
                        kernelSize=self.contourKernel.text()
                        print("hi1")
                        if(kernelSize!=""):      
                                kernelSize=int(kernelSize)
                        else: kernelSize=3
                        print("hi2")
                        img = self.image.copy()
                        print(img.shape)
                        img = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
                        print(img.shape)
                        threshold=self.seuilGradient.text()
                        sobelx = cv2.Sobel(img, cv2.CV_64F, 1, 0, kernelSize)
                        sobely = cv2.Sobel(img, cv2.CV_64F, 0, 1, kernelSize)
                        mag, angle = cv2.cartToPolar(sobelx, sobely, angleInDegrees=True)
                        
                        print("hi 1")
                        if(threshold==""):
                                thresholded = cv2.threshold(mag, 126, 255, cv2.THRESH_BINARY)[1]
                        else:   

                                thresholded = cv2.threshold(mag, int(threshold), 255, cv2.THRESH_BINARY)[1]

                        self.oldImage = self.image.copy()
                        self.image=cv2.cvtColor(cv2.convertScaleAbs(thresholded), cv2.COLOR_BGR2RGB)
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)

        def robertImage(self):
                try:    
                        img = self.image.copy()
                        img = cv2.cvtColor(self.image, cv2.COLOR_BGR2GRAY)
                        threshold1=self.seuilRobert_1.text()
                        threshold2=self.seuilRobert_2.text()
                        if(threshold1==""):
                                threshold1=30
                        else:   
                               threshold1=int(threshold1) 
                        
                        if(threshold2==""):
                                threshold2=100
                        else:   
                               threshold2=int(threshold2) 
                        
                        roberts = cv2.Canny(img, threshold1, threshold2)
                        contours, hierarchy = cv2.findContours(roberts, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
                        self.oldImage = self.image.copy()
                        self.image=cv2.drawContours(img, contours, -1, (0, 255, 0), 2)
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)

        def laplacienImg(self):
                try:     
                        kernelSize=self.contourKernel.text()
                        if(kernelSize!=""):kernelSize=int(kernelSize)
                        else: kernelSize=3
                        img = self.image.copy()
                        ddepth = cv2.CV_64F
                        dst = cv2.Laplacian(img, ddepth, ksize=kernelSize)
                        abs_dst = cv2.convertScaleAbs(dst)
                        self.oldImage = self.image.copy()
                        self.image = abs_dst
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)

        def pointsInteretImg(self):
                if self.harrisButton.isChecked() :
                        try:     
                                img = self.image.copy()
                                gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                                dst = cv2.cornerHarris(gray, 3, 3, 0.05)
                                thresh = 0.01 * dst.max()
                                corners = []
                                for i in range(dst.shape[0]):
                                        for j in range(dst.shape[1]):
                                                if dst[i,j] > thresh:
                                                        corners.append((j, i))
                                for corner in corners:
                                        cv2.circle(img, corner, 3, (0, 255, 0), -1)                        
                                self.oldImage = self.image.copy()
                                self.image = img
                                self.setPhoto(self.image)
                        except Exception as e:
                                print(e)
                elif self.siftButton.isChecked():
                        try:
                                img = self.image.copy()
                                if len(img.shape) > 2:
                                        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                                result = cv2.Canny(img, 100, 200)
                                sift = cv2.SIFT_create()
                                keypoints = sift.detect(img, None)
                                result = cv2.drawKeypoints(img, keypoints, None, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
                                self.oldImage = self.image.copy()
                                self.image = result
                                self.setPhoto(self.image)
                        except Exception as e:
                                print(e)
                else:
                        try:
                                img = self.image.copy()
                                gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
                                edges = cv2.Canny(gray,50,150,apertureSize = 3)
                                lines = cv2.HoughLines(edges,1,np.pi/180,200)
                                for line in lines:
                                        rho,theta = line[0]
                                        a = np.cos(theta)
                                        b = np.sin(theta)
                                        x0 = a*rho
                                        y0 = b*rho
                                        x1 = int(x0 + 1000*(-b))
                                        y1 = int(y0 + 1000*(a))
                                        x2 = int(x0 - 1000*(-b))
                                        y2 = int(y0 - 1000*(a))
                                        cv2.line(img,(x1,y1),(x2,y2),(0,0,255),2)
                                self.oldImage = self.image.copy()
                                self.image = img
                                self.setPhoto(self.image)
                        except Exception as e:
                                print(e)

        def region_growing(self):
                try:     
                        image = self.image.copy()
                        
                        img = self.image.copy()
                        image = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
                        print(image.shape)
                        # threshold, _ = cv2.threshold(image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
                        seedInput=self.seedInput.text()
                        seed=(200,200)
                        
                        if seedInput!="":
                                h, w = seedInput.split(",") 
                                seed=(int(h),int(w))
                        height, width = image.shape[:2]     
                        out_img = np.zeros((height, width), dtype=np.uint8)   
                        q = []
                        q.append(seed)
                        while len(q) > 0: 
                                current_point = q.pop(0) 
                                x, y = current_point  
                                if x < 0 or y < 0 or x >= height or y >= width: 
                                        continue  
                                if out_img[x][y] > 0: 
                                        continue  
                                if abs(int(image[x][y]) - int(image[seed])) > 120: 
                                        continue  
                                out_img[x][y] = 255  
                                
                                q.append((x - 1, y)) 
                                q.append((x + 1, y)) 
                                q.append((x, y - 1)) 
                                q.append((x, y + 1)) 
                        inverted = cv2.bitwise_not(out_img)
                        result = cv2.bitwise_and(img,img, mask= inverted)
                        out_img = cv2.cvtColor(result,cv2.COLOR_BGR2RGB)
                        

                        self.oldImage = self.image.copy() 
                        self.image = out_img  
                        self.setPhoto(self.image) 
                except Exception as e: 
                            print(e)
                
        def kmeans_region(self):
                try:     
                        img = self.image.copy()
                        img_float = np.float32(img.reshape((-1, 3)))  
                        criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)    
                        K=2
                        if self.nbClasses.text()!="":
                                K=int(self.nbClasses.text())
                        ret, label, center = cv2.kmeans(img_float, K, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)
                        center = np.uint8(center)
                        res = center[label.flatten()]
                        res = res.reshape((img.shape))
                        self.oldImage = self.image.copy()
                        self.image = res
                        self.setPhoto(self.image)
                except Exception as e:
                        print(e)

        def partition_image(self):
                try:     
                        img = self.image.copy()
                        segments = slic(img, n_segments=100, compactness=10)
                        segmented_image = label2rgb(segments, img, kind='avg')

                        self.oldImage = self.image.copy() 
                        self.image = segmented_image  
                        self.setPhoto(self.image) 
                except Exception as e: 
                            print(e)
               
        def onDeletteImg(self):
                try:
                        img = self.image.astype(np.float32)
                        img = img / 255.0
                        coeffs = pywt.dwt2(img, 'haar')
                        cA, (cH, cV, cD) = coeffs

                        rec_img = pywt.idwt2(coeffs, 'haar')
                        rec_img = pywt.idwt2((cA, (cH, cV, cD)), 'haar')
                        self.oldImage = self.image.copy() 
                        self.image = (rec_img * 255.0).astype(np.uint8)  
                        self.setPhoto(self.image) 
                except Exception as e:
                        print(e)

        def LZWImg(self):
                try:
                        img = self.image.copy()
                        _, img_bytes = cv2.imencode('.jpg', img)
                        compressed_bytes = lzma.compress(img_bytes)
                        decompressed_bytes = lzma.decompress(compressed_bytes)
                        decompressed_img = cv2.imdecode(np.frombuffer(decompressed_bytes, dtype=np.uint8), cv2.IMREAD_COLOR)
                        self.oldImage = self.image.copy() 
                        self.image = decompressed_img  
                        self.setPhoto(self.image) 
                except Exception as e:
                        print(e)
      
        def encodeHuffman(self, image):
                freq = defaultdict(int)
                for i in range(image.shape[0]):
                        for j in range(image.shape[1]):
                                freq[image[i,j]] += 1
                heap = [[wt, [sym, ""]] for sym, wt in freq.items()]
                heapq.heapify(heap)
                while len(heap) > 1:
                        lo = heapq.heappop(heap)
                        hi = heapq.heappop(heap)
                        for pair in lo[1:]:
                                pair[1] = '0' + pair[1]
                        for pair in hi[1:]:
                                pair[1] = '1' + pair[1]
                        heapq.heappush(heap, [lo[0] + hi[0]] + lo[1:] + hi[1:])
                code = dict(heapq.heappop(heap)[1:])
                encoded_image = []
                for i in range(image.shape[0]):
                        for j in range(image.shape[1]):
                                encoded_image.append(code[image[i,j]])
                return encoded_image, code
        
        def decodeHuffman(self, encoded_image, code, shape):
                inv_code = {v: k for k, v in code.items()}
                decoded_image = []
                current_code = ''
                for code in encoded_image:
                        current_code += code
                        if current_code in inv_code:
                                decoded_image.append(inv_code[current_code])
                                current_code = ''
                decoded_image = np.array(decoded_image).reshape(shape)
                return decoded_image
        
        def HuffmanImg(self):
                try:
                        img = self.image.copy()
                        if len(img.shape) == 3:
                                b,g,r = cv2.split(img)
                                
                                encoded_b, code = self.encodeHuffman(b)
                                decoded_b = self.decodeHuffman(encoded_b, code, b.shape)
                                encoded_g, code = self.encodeHuffman(g)
                                decoded_g = self.decodeHuffman(encoded_g, code, g.shape)
                                encoded_r, code = self.encodeHuffman(r)
                                decoded_r = self.decodeHuffman(encoded_r, code, r.shape)

                                decoded_image = cv2.merge((decoded_b, decoded_g, decoded_r))
                        else:
                                encoded_image, code = self.encodeHuffman(b)
                                decoded_image = self.decodeHuffman(encoded_image, code, img.shape)
                        
                        self.oldImage = self.image.copy() 
                        self.image = decoded_image  
                        self.setPhoto(self.image) 
                except Exception as e:
                        print(e)
                

        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
